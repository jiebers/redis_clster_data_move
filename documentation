针对第一版进行了相应bug修改，改动较大。使用上更加简化或简单，为快速创建集群，迁移数据，恢复故障提供帮助。在创建集群时可根据给予的ip自动创建主从及初始化，建议master和slave分别在不同机器。
参数介绍：
+------------------------------------------------------------------------+
|Redis Cluster Tool for Redis Cluster					                 |
|version:V1.1 2016/09/12   支持Redis Cluster 密码    			             |
|只是对Redis Cluster 原生命令进行封装和计算,没有其他改动,放心使用               |
|			欢迎使用Redis Cluster Tool 工具	                             |
+------------------------------------------------------------------------+
options :
                'help',         # 帮助
                't',            # 设置参数:
				ms:移动slot,reshard 重新分片,
				del:删除节点,
				add:添加节点,
				add_slave:添加slave,
				up:升级slave,
				create:创建集群,注意主从分别为不同物理机
				up:升级
				info:集群信息
				nodes:集群节点信息
                'h',            # 主机host:如
				-h 1.1.1.1:port ,
				多个主机时:-h '1.1.1.1:port,2.2.2.2:port'用','隔开  
                'p',            # 端口
                'n',            # node 节点,如: -n 'id' 如果2个时,-n 'source-id,destion-id'
                'r',              #指定slot 范围,如:-r 0-16383
                'b',            #指定backup 地址:如 -b ip:port,-b 'ip:port,ip2:port2'
Sample :
	
	redis_cluster_tool -t nodes -h host:port
	#查看集群节点信息
	redis_cluster_tool -t info -h host:port
	#查看集群信息
	redis_cluster_tool -t create -h 'host1:port1,host2:port2,host3:port3' -b 'backip1:port1,backip2:port2,backip3:port3'
	#创建集群,并自动根据不同物理ip配置主从关系,尽量根据对应关系来进行创建如:host1:port1 对应的备份关系为backip1:port1
	#并在创建完集群后自动进行根据master个数分片
	redis_cluster_tool -t reshard -h host:port
	#自动根据当前master 进行将16384 进行重新分片,注意在集群创建初化时进行,当线上重新分配，其中的slot会有短暂中断情况
	#可以先人工计算，然后将slot以迁移方式进行	
	redis_cluster_tool -t ms -h host:port -n node_id -r 0-16383
	#对slot进行迁移,将0-16383范围内的host:prot 的slot迁移到 nodeid 为 -n指定的节点
	redis_cluster_tool -t del -h host:port -n  node_id 
	#在host:port 中删除删除节点id
	redis_cluster_tool -t add -h source_host:source_port,target_host:target_port 
	# 添加节点到source_host:port 中
	redis_cluster_tool -t add_slave -h host:port -n node_id
	#添加slave节点:将node_id 节点添加到host中
	redis_cluster_toole -t up  -h host:port
	#将host和port实例升级weimaster

环境准备：
ip：172.16.40.15
port:7000-7005
master:7000-7002
slave:7003-7005
启动各个服务
程序修改地方：
编辑程序redis_cluster_tool
my $pass='redis';#设置密码
创建集群

查看集群节点：

[root@localhost ~]# ./redis_cluster_tool -t nodes -h 172.16.40.15:7000
7bb1bfda0f4bf86d22c095dc12c070b83cba0c5f :7000 myself,master - 0 0 0 connected
[root@localhost ~]# 

创建集群：

./redis_cluster_tool -t create -h '172.16.40.15:7000,172.16.40.15:7001,172.16.40.15:7002' -b '172.16.40.15:7003,172.16.40.15:7004,172.16.40.15:7005'
#-h 指定master ip和端口
#-b 指定作为master的slaveip和端口
#注意-h 指定的ip 和 -b 指定的ip 最好顺序一致，因为程序会根据 根据顺序建立主从，
#例如：当master为172.16.40.15:7000时slave为172.16.40.15:7003
#为了安全起见master和slave都要在不同机器上进行分配

查看集群节点

[root@localhost ~]# ./redis_cluster_tool -t nodes -h 172.16.40.15:7000
0f36f228db6152c011e88ea80789a15605bbb4d6 172.16.40.15:7005 slave a5ca00b9a91339d73fa6ce535f222d1322774e03 0 1474292615619 3 connected
bfe2bfce2fff353fe89ab879705a78447d6226b1 172.16.40.15:7004 slave 3cdedce16e32ae284fc81fd31a941c59b40408e4 0 1474292614218 4 connected
9a4b151ce090ffc47ce2bf426df4b14d9cb19834 172.16.40.15:7003 slave b358c4db550640cd9ecc9861115cb2f5d0504bd5 0 1474292614618 1 connected
3cdedce16e32ae284fc81fd31a941c59b40408e4 172.16.40.15:7001 master - 0 1474292615218 4 connected 5462-10922
b358c4db550640cd9ecc9861115cb2f5d0504bd5 172.16.40.15:7000 myself,master - 0 0 1 connected 0-5461
a5ca00b9a91339d73fa6ce535f222d1322774e03 172.16.40.15:7002 master - 0 1474292615619 3 connected 10923-16383
[root@localhost ~]# 
迁移槽位
#会将数据也进行迁移，此时需要观察程序或连接是否有异常情况
#将7001 的5462-10922槽位迁移到7000端口
3cdedce16e32ae284fc81fd31a941c59b40408e4 172.16.40.15:7001 master - 0 1474292615218 4 connected 5462-10922
b358c4db550640cd9ecc9861115cb2f5d0504bd5 172.16.40.15:7000 myself,master - 0 0 1 connected 0-5461
检测被迁移槽位程序主要测试在迁移过程中此slot是否读取正常

[root@localhost soft]# cat get_key.sh 
#!/bin/bash
if [[ $# -eq 3 ]];then 
	ip=$1
	port=$2
	slot=$3
else
	echo "please input slot ip port slot \n"
	exit
fi
while(true);
do
	num=`redis-cli -c -h $ip -p $port -a redis  CLUSTER COUNTKEYSINSLOT $slot|awk '{print $1}'`
	key=`redis-cli -c -h $ip -p $port -a redis  CLUSTER GETKEYSINSLOT $slot $num`
	for i in $key
	do
		echo "fdsafdsafdsa-----------">>/tmp/aa.txt
		redis-cli -c -h $ip -p $port -a redis get $i
	done
done

使用方法 ：
./get_key.sh 172.16.40.15 7001 5480 #被迁移的ip 端口 和范围内的槽位
迁移数据5462-10922

./redis_cluster_tool -t ms -h 172.16.40.15:7001 -n b358c4db550640cd9ecc9861115cb2f5d0504bd5 -r 5462-10922
#b358c4db550640cd9ecc9861115cb2f5d0504bd5 将槽位迁移目标节点
显示如下图：

当存在数据时会将数据进行迁移，否则直接迁移槽位即可

重新分片：
[root@localhost ~]# ./redis_cluster_tool -t reshard -h 172.16.40.15:7000
涉及迁移数据,为保证数据安全性,暂时利用数据迁移功能进行迁移。根据master 计算得知各个节点的槽位如下: 
172.16.40.15:7000 分得槽位范围: 0 5461
172.16.40.15:7001 分得槽位范围: 5462 10922
172.16.40.15:7002 分得槽位范围: 10923 16383 
请使用 ./redis_cluster_tool -t ms -h host:port -n nodeid -r range 进行分配
删除节点：
查看集群：

[root@localhost ~]# ./redis_cluster_tool -t nodes -h 172.16.40.15:7000
4dbf2af3a77f2ff54b520558ee451fc968906507 172.16.40.15:7001 master - 0 1474371620296 3 connected 6001-10922
b2ca7e0345a84c3f299cc5a09c2b9985424c3bcc 172.16.40.15:7005 slave 687e32407e37c0ef4343378636d31e957bfb9846 0 1474371622299 2 connected
875a541193288f9a5a9e469491ed32b0697ea376 172.16.40.15:7000 myself,master - 0 0 4 connected 0-6000
687e32407e37c0ef4343378636d31e957bfb9846 172.16.40.15:7002 master - 0 1474371621298 2 connected 10923-16383
2160454279ced52d0b7d208113d0190986298042 172.16.40.15:7003 slave 875a541193288f9a5a9e469491ed32b0697ea376 0 1474371620797 4 connected
0221d794c0669de759c43e7e57ec401f3832b957 172.16.40.15:7004 slave 4dbf2af3a77f2ff54b520558ee451fc968906507 0 1474371620296 3 connected
[root@localhost ~]# 
删掉节点

[root@localhost ~]# ./redis_cluster_tool -t del -h 172.16.40.15:7000 -n 687e32407e37c0ef4343378636d31e957bfb9846
172.16.40.15 -p 7000 删除节点687e32407e37c0ef4343378636d31e957bfb9846 状态:OK
     查看集群

        此时7002 不存在但是槽位10923-16383 已经不存在，线上禁止直接删除master 
[root@localhost ~]# ./redis_cluster_tool -t nodes -h 172.16.40.15:7000
4dbf2af3a77f2ff54b520558ee451fc968906507 172.16.40.15:7001 master - 0 1474371715930 3 connected 6001-10922
b2ca7e0345a84c3f299cc5a09c2b9985424c3bcc 172.16.40.15:7005 slave - 0 1474371714428 2 connected
875a541193288f9a5a9e469491ed32b0697ea376 172.16.40.15:7000 myself,master - 0 0 4 connected 0-6000
2160454279ced52d0b7d208113d0190986298042 172.16.40.15:7003 slave 875a541193288f9a5a9e469491ed32b0697ea376 0 1474371714928 4 connected
0221d794c0669de759c43e7e57ec401f3832b957 172.16.40.15:7004 slave 4dbf2af3a77f2ff54b520558ee451fc968906507 0 1474371716429 3 connected
添加节点：
添加

[root@localhost ~]# ./redis_cluster_tool -t add -h 172.16.40.15:7002,172.16.40.15:7000 
将172.16.40.15 7000 添加172.16.40.15 -p 7002 集群状态:OK
[root@localhost ~]# 
查看集群：

[root@localhost ~]# ./redis_cluster_tool -t nodes -h 172.16.40.15:7000
4dbf2af3a77f2ff54b520558ee451fc968906507 172.16.40.15:7001 master - 0 1474371908170 3 connected 6001-10922
b2ca7e0345a84c3f299cc5a09c2b9985424c3bcc 172.16.40.15:7005 slave 687e32407e37c0ef4343378636d31e957bfb9846 0 1474371907670 2 connected
875a541193288f9a5a9e469491ed32b0697ea376 172.16.40.15:7000 myself,master - 0 0 4 connected 0-6000
687e32407e37c0ef4343378636d31e957bfb9846 172.16.40.15:7002 master - 0 1474371907170 2 connected 10923-16383
2160454279ced52d0b7d208113d0190986298042 172.16.40.15:7003 slave 875a541193288f9a5a9e469491ed32b0697ea376 0 1474371906669 4 connected
0221d794c0669de759c43e7e57ec401f3832b957 172.16.40.15:7004 slave 4dbf2af3a77f2ff54b520558ee451fc968906507 0 1474371906669 3 connected
       添加新节点

        redis-server redis_7006.conf &

[root@localhost ~]# ./redis_cluster_tool -t add -h 172.16.40.15:7006,172.16.40.15:7000
将172.16.40.15 7000 添加172.16.40.15 -p 7006 集群状态:OK

查看集群：

[root@localhost 7006]# /usr/local/bin/redis-cli -h 172.16.40.15 -p 7000 -a redis cluster nodes
4dbf2af3a77f2ff54b520558ee451fc968906507 172.16.40.15:7001 master - 0 1474373250315 3 connected 6001-10922
687e32407e37c0ef4343378636d31e957bfb9846 172.16.40.15:7002 master - 0 1474373249314 2 connected 10923-16383
0221d794c0669de759c43e7e57ec401f3832b957 172.16.40.15:7004 slave 4dbf2af3a77f2ff54b520558ee451fc968906507 0 1474373249815 3 connected
3d6ebc11386689f2b4d3c116872bfa271affce1c 172.16.40.15:7006 master - 0 1474373248813 0 connected
b2ca7e0345a84c3f299cc5a09c2b9985424c3bcc 172.16.40.15:7005 slave 687e32407e37c0ef4343378636d31e957bfb9846 0 1474373248813 2 connected
875a541193288f9a5a9e469491ed32b0697ea376 172.16.40.15:7000 myself,master - 0 0 4 connected 0-6000
2160454279ced52d0b7d208113d0190986298042 172.16.40.15:7003 slave 875a541193288f9a5a9e469491ed32b0697ea376 0 1474373250815 4 connected
[root@localhost 7006]# 
为新节点3d6ebc11386689f2b4d3c116872bfa271affce1c分配槽位：

[root@localhost ~]# ./redis_cluster_tool -t ms -h 172.16.40.15:7000 -n 3d6ebc11386689f2b4d3c116872bfa271affce1c -r 0-500
#从172.16.40.15:7000 上分配 -r 0-500 给新加的节点  -n 3d6ebc11386689f2b4d3c116872bfa271affce1c 
查看集群 

[root@localhost 7006]# /usr/local/bin/redis-cli -h 172.16.40.15 -p 7000 -a redis cluster nodes
4dbf2af3a77f2ff54b520558ee451fc968906507 172.16.40.15:7001 master - 0 1474373478069 3 connected 6001-10922
687e32407e37c0ef4343378636d31e957bfb9846 172.16.40.15:7002 master - 0 1474373478970 2 connected 10923-16383
0221d794c0669de759c43e7e57ec401f3832b957 172.16.40.15:7004 slave 4dbf2af3a77f2ff54b520558ee451fc968906507 0 1474373479071 3 connected
3d6ebc11386689f2b4d3c116872bfa271affce1c 172.16.40.15:7006 master - 0 1474373477268 5 connected 0-500
b2ca7e0345a84c3f299cc5a09c2b9985424c3bcc 172.16.40.15:7005 slave 687e32407e37c0ef4343378636d31e957bfb9846 0 1474373479171 2 connected
875a541193288f9a5a9e469491ed32b0697ea376 172.16.40.15:7000 myself,master - 0 0 4 connected 501-6000
2160454279ced52d0b7d208113d0190986298042 172.16.40.15:7003 slave 875a541193288f9a5a9e469491ed32b0697ea376 0 1474373478570 4 connected
[root@localhost 7006]# 
#0-500 过去了说明正常
添加从节点
查看集群

[root@localhost ~]# ./redis_cluster_tool -t nodes -h 172.16.40.15:7000
4dbf2af3a77f2ff54b520558ee451fc968906507 172.16.40.15:7001 master - 0 1474375187528 3 connected 6001-10922
687e32407e37c0ef4343378636d31e957bfb9846 172.16.40.15:7002 master - 0 1474375187528 2 connected 10923-16383
0221d794c0669de759c43e7e57ec401f3832b957 172.16.40.15:7004 slave 4dbf2af3a77f2ff54b520558ee451fc968906507 0 1474375189030 3 connected
3d6ebc11386689f2b4d3c116872bfa271affce1c 172.16.40.15:7006 master - 0 1474375188028 5 connected 0-720
b2ca7e0345a84c3f299cc5a09c2b9985424c3bcc 172.16.40.15:7005 slave 687e32407e37c0ef4343378636d31e957bfb9846 0 1474375189030 2 connected
875a541193288f9a5a9e469491ed32b0697ea376 172.16.40.15:7000 myself,master - 0 0 4 connected 721-6000
2160454279ced52d0b7d208113d0190986298042 172.16.40.15:7003 slave 875a541193288f9a5a9e469491ed32b0697ea376 0 1474375187027 4 connected
[root@localhost ~]# 
将7003 节点添加为7006 的从

[root@localhost ~]# ./redis_cluster_tool -t add_slave -h 172.16.40.15:7003 -n 3d6ebc11386689f2b4d3c116872bfa271affce1c
将172.16.40.15 -p 7003 设置为3d6ebc11386689f2b4d3c116872bfa271affce1c 的从 :OK 
[root@localhost ~]# 
查看集群：
[root@localhost ~]# ./redis_cluster_tool -t nodes -h 172.16.40.15:7000
4dbf2af3a77f2ff54b520558ee451fc968906507 172.16.40.15:7001 master - 0 1474375632056 3 connected 6001-10922
687e32407e37c0ef4343378636d31e957bfb9846 172.16.40.15:7002 master - 0 1474375630054 2 connected 10923-16383
0221d794c0669de759c43e7e57ec401f3832b957 172.16.40.15:7004 slave 4dbf2af3a77f2ff54b520558ee451fc968906507 0 1474375631556 3 connected
3d6ebc11386689f2b4d3c116872bfa271affce1c 172.16.40.15:7006 master - 0 1474375630555 5 connected 0-720
b2ca7e0345a84c3f299cc5a09c2b9985424c3bcc 172.16.40.15:7005 slave 687e32407e37c0ef4343378636d31e957bfb9846 0 1474375631055 2 connected
875a541193288f9a5a9e469491ed32b0697ea376 172.16.40.15:7000 myself,master - 0 0 4 connected 721-6000
2160454279ced52d0b7d208113d0190986298042 172.16.40.15:7003 slave 3d6ebc11386689f2b4d3c116872bfa271affce1c 0 1474375631055 5 connected
[root@localhost ~]#
升级slave为master
将7002 升级为7005的master
查看集群

[root@localhost ~]# ./redis_cluster_tool -t nodes -h 172.16.40.15:7000
4dbf2af3a77f2ff54b520558ee451fc968906507 172.16.40.15:7001 master - 0 1474376007020 8 connected 6001-10922
687e32407e37c0ef4343378636d31e957bfb9846 172.16.40.15:7002 slave b2ca7e0345a84c3f299cc5a09c2b9985424c3bcc 0 1474376006019 7 connected
0221d794c0669de759c43e7e57ec401f3832b957 172.16.40.15:7004 slave 4dbf2af3a77f2ff54b520558ee451fc968906507 0 1474376005518 8 connected
3d6ebc11386689f2b4d3c116872bfa271affce1c 172.16.40.15:7006 master - 0 1474376006019 5 connected 0-720
b2ca7e0345a84c3f299cc5a09c2b9985424c3bcc 172.16.40.15:7005 master - 0 1474376005518 7 connected 10923-16383
875a541193288f9a5a9e469491ed32b0697ea376 172.16.40.15:7000 myself,master - 0 0 4 connected 721-6000
2160454279ced52d0b7d208113d0190986298042 172.16.40.15:7003 slave 3d6ebc11386689f2b4d3c116872bfa271affce1c 0 1474376006519 5 connected
[root@localhost ~]#
升级为master

[root@localhost ~]# ./redis_cluster_tool -t up -h 172.16.40.15:7002
/usr/local/bin/redis-cli  -h 172.16.40.15 -p 7002 -a redis  CLUSTER FAILOVER 
将172.16.40.15 -p 7002 提升为master OK ,原Master 为172.16.40.15:7005 
[root@localhost ~]# 
查看集群：

[root@localhost ~]# ./redis_cluster_tool -t nodes -h 172.16.40.15:7000
4dbf2af3a77f2ff54b520558ee451fc968906507 172.16.40.15:7001 master - 0 1474376029548 8 connected 6001-10922
687e32407e37c0ef4343378636d31e957bfb9846 172.16.40.15:7002 master - 0 1474376030049 9 connected 10923-16383
0221d794c0669de759c43e7e57ec401f3832b957 172.16.40.15:7004 slave 4dbf2af3a77f2ff54b520558ee451fc968906507 0 1474376029048 8 connected
3d6ebc11386689f2b4d3c116872bfa271affce1c 172.16.40.15:7006 master - 0 1474376030550 5 connected 0-720
b2ca7e0345a84c3f299cc5a09c2b9985424c3bcc 172.16.40.15:7005 slave 687e32407e37c0ef4343378636d31e957bfb9846 0 1474376029548 9 connected
875a541193288f9a5a9e469491ed32b0697ea376 172.16.40.15:7000 myself,master - 0 0 4 connected 721-6000
2160454279ced52d0b7d208113d0190986298042 172.16.40.15:7003 slave 3d6ebc11386689f2b4d3c116872bfa271affce1c 0 1474376030550 5 connected
[root@localhost ~]# 

插入脚本：
[root@localhost soft]# cat in.sh 
#!/bin/bash
number=20000000
let i=1
while  [ $i -le $number ];do
    redis-cli -h 172.16.40.15 -c  -p 7000 -a redis set $i test$i >>/tmp/in.sh 
    ((i++))
done
检测key脚本
[root@localhost ~]# cat check_key.pl 
#!/usr/bin/perl
##Redis Tool for Redis Cluster
##kevin6386@163.com 2016/09/12 v.1.1
##Support Passwrod for Redis Cluster
use strict;
my $pass='redis';
my $host='172.16.40.15 -p 7001 ';
my $en=2000;
my $i=0;
while(1){
while ($i < $en ){
	my $slot=$i;
	my $n=`redis-cli -a $pass -c -h $host CLUSTER COUNTKEYSINSLOT $slot|awk '{print \$1}'`;
	chomp($n);
	my @key=`redis-cli -a $pass -c -h $host CLUSTER GETKEYSINSLOT $slot $n`;
        foreach my $k (@key){
               	chomp($k);
		my $re=`redis-cli -c -h $host -a redis get $k`;
		print "slot $slot key:$k 数据:$re   \n";
        }
	$i++;
}
}

